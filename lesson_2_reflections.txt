What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository with git init, it creates a new repository the current directory,
	and the files inside of it. Gives a message saying. "Initialized empty Git repository in (current directory name)".
	This also adds a .Git folder that's hidden inside the directory. You can use git status to check if it actually created
	a repository, and should say it's at the HEAD of the repository, and no commits yet.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	It's in between your directory and a commit. The staging area lets you decide what all files you want to commit at once,
	instead of committing all of the files, like the ones that you didn't even change. It's like a temp area to make your 
	decisions.

How can you use the staging area to make sure you have one commit per logical change?

	You can use the staging area to evaluate your file before you commit, and add multiple files that you changed so it
	is just all one commit. You can also compare the staged files to the last commit for each file, or the working area
	to the staged area if you made changes to the file after staging it.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches help if you want to keep a current version of a file, but want to experiment making different versions and still
	keep the way the original file works.

How do the diagrams help you visualize the branch structure?

	Makes it easier to map out the branches, and see which ones connect and are accessible through specific branches, and
	which ones are not accessible.

